client_max_body_size 4G;

## Wildcard is for accepting all requests to DOMAIN_NAME
#server_name DOMAIN_NAME *.DOMAIN_NAME;
server_name DOMAIN_NAME;

## ~2 seconds is often enough for most folks to parse HTML/CSS and
## retrieve needed images/icons/frames, connections are cheap in
## nginx so increasing this is generally safe...
keepalive_timeout 5;

## path for static files
root   SITE_ROOT/current/public/;   # <--- be sure to point to 'public'!

## Uncomment this line to serve rails with Passenger
#passenger_enabled on;

if ($request_method !~ ^(GET|HEAD|PUT|POST|PATCH|DELETE|OPTIONS)$ ){
	return 405;
}

## Prefer to serve static files directly from nginx to avoid unnecessary
## data copies from the application server.
##
## try_files directive appeared in in nginx 0.7.27 and has stabilized
## over time.  Older versions of nginx (e.g. 0.6.x) requires
## "if (!-f $request_filename)" which was less efficient:
## http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
try_files $uri/index.html $uri/index.htm $uri.html $uri @app;

# Rails error pages
error_page 500 502 503 504 /500.html;
location = /500.html {
  root SITE_ROOT/current/public/;
}

error_page 404              /404.html;
location = /404.html {
  root SITE_ROOT/current/public/;
}

error_page 422              /422.html;
location = /422.html {
  root SITE_ROOT/current/public/;
}

location @DOMAIN_NAME.app {
  ## an HTTP header important enough to have its own Wikipedia entry:
  ##   http://en.wikipedia.org/wiki/X-Forwarded-For
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

  ## enable this if and only if you use HTTPS, this helps Rack
  ## set the proper protocol for doing redirects:
  ## proxy_set_header X-Forwarded-Proto https;

  ## pass the Host: header from the client right along so redirects
  ## can be set properly within the Rack application
  proxy_set_header Host $http_host;

  ## we don't want nginx trying to do something clever with
  ## redirects, we set the Host: header above already.
  proxy_redirect off;

  ## set "proxy_buffering off" *only* for Rainbows! when doing
  ## Comet/long-poll/streaming.  It's also safe to set if you're using
  ## only serving fast clients with Unicorn + nginx, but not slow
  ## clients.  You normally want nginx to buffer responses to slow
  ## clients, even with Rails 3.1 streaming because otherwise a slow
  ## client can become a bottleneck of Unicorn.
  ##
  ## The Rack application may also set "X-Accel-Buffering (yes|no)"
  ## in the response headers to disable/enable buffering on a
  ## per-response basis.
  # proxy_buffering off;

  proxy_pass http://DOMAIN_NAME.app;
}

location ~ ^/(assets)/  {
  gzip_static on;
  expires     max;
  add_header  Cache-Control public;
}

location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
  expires max;
  add_header  Cache-Control public;
}

location = /favicon.ico {
	expires    max;
	add_header Cache-Control public;
  access_log off;
}

## THIS IS RAILS!
location ~ \.php$ {
	deny  all;
}

## BLOCKS ACCESS TO . FILES (.svn, .htaccess, ...)
location ~ /\. {
   deny  all;
}

location = /robots.txt {
   allow all;
   log_not_found off;
   access_log off;
}

## Very rarely should these ever be accessed outside of your lan
location ~* \.(txt|log)$ {
   allow 192.168.0.0/16;
   deny all;
}
