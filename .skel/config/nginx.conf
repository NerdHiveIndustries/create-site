## Use nginx as a reverse proxy to a backend server like Unicorn.
## This can be any application server, not just Unicorn/Rainbows!
upstream DOMAIN_NAME.app {
  ## fail_timeout=0 means we always retry an upstream even if it failed
  ## to return a good HTTP response (in case the Unicorn master nukes a
  ## single worker for timing out).
  server unix:SITE_ROOT/shared/sockets/DOMAIN_NAME.sock fail_timeout=0;
}

## Redirects www.DOMAIN_NAME to DOMAIN_NAME
server {
  listen 80;
  listen 443 ssl;
  server_name  www.DOMAIN_NAME;
  rewrite ^/(.*) http://DOMAIN_NAME/$1 permanent;
}

server {
  ## enable one of the following if you're on Linux or FreeBSD
  listen 80 default deferred; # for Linux
  # listen 80 default accept_filter=httpready; # for FreeBSD

  ## If you have IPv6, you'll likely want to have two separate listeners.
  ## One on IPv4 only (the default), and another on IPv6 only instead
  ## of a single dual-stack listener.  A dual-stack listener will make
  ## for ugly IPv4 addresses in $remote_addr (e.g ":ffff:10.0.0.1"
  ## instead of just "10.0.0.1") and potentially trigger bugs in
  ## some software.
  # listen [::]:80 ipv6only=on deferred; # deferred or accept_filter recommended

  access_log SITE_ROOT/shared/log/nginx.access.log;
  error_log SITE_ROOT/shared/log/nginx.error.log warn;
	#access_log  off;
	#error_log off;
  include SITE_ROOT/config/_common.config;
}

## HTTPS is disabled by default, as an SSL cert is required
#server {
  #listen 443 deferred;
  #listen [::]:443 ipv6only=on deferred; # deferred or accept_filter recommended

  #ssl	on;
  ## The ssl/ folder here would be relative to nginx config dir
  #ssl_certificate     ssl/DOMAIN_NAME.pem;
  #ssl_certificate_key ssl/DOMAIN_NAME.key;

  #access_log SITE_ROOT/shared/log/access_ssl.log;
  #error_log SITE_ROOT/shared/log/error_ssl.log warn;
  #include SITE_ROOT/config/_common.config;
#}
